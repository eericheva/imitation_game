# generated by datamodel-codegen:
#   filename:  basemodel_Imitation_Game.json
#   timestamp: 2024-06-13T08:47:58+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Extra


class ChatIndicators(Enum):
    Question = "Question"
    Answer = "Answer"
    Reasoning = "Reasoning"
    Decision = "Decision"
    Confidence_Metric = "Confidence Metric"


class GameMode(Enum):
    blind = "blind"
    full = "full"


class GameType(Enum):
    direct = "direct"
    inverse = "inverse"


class Prefixes(Enum):
    PlayerA = "PlayerA"
    PlayerB = "PlayerB"
    PlayerC = "PlayerC"


class MessageWrapper(Enum):
    says = "says"


class VoiceItItems(Enum):
    voice_c_yes = "voice_c_yes"
    voice_b_yes = "voice_b_yes"


class GameStartItems(Enum):
    start_game = "start_game"
    stop_game = "stop_game"


class BaseCommand(Enum):
    start = "start"
    help = "help"


class Player(BaseModel):
    username: Optional[str] = "null"
    last_message: Optional[str] = "null"
    user_history: Optional[List[str]] = None
    game_chat_id: Optional[int] = None
    model: Optional[Dict[str, Any]] = None
    game_type: Optional[GameType] = None


class Game(BaseModel):
    playerA: Optional[Player] = None
    playerB: Optional[Player] = None
    playerC: Optional[Player] = None
    game_chat_id: Optional[int] = None
    last_call: Optional[Dict[str, Any]] = None
    game_status: Optional[bool] = False
    game_mode: Optional[GameMode] = None
    game_type: Optional[GameType] = None
    model: Optional[Dict[str, Any]] = None


class ImitationGame(BaseModel):
    class Config:
        extra = Extra.forbid

    player: Optional[Player] = None
    game: Optional[Game] = None
